apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: solr
objects:  
- kind: StatefulSet
  apiVersion: apps/v1
  metadata:
    name: solr-ss-${ENV}
    labels:
      app: solr-${ENV}
      app.kubernetes.io/part-of: solr-6
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: solr-${ENV}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: solr-${ENV}
      spec:
        restartPolicy: Always
        initContainers:
          - name: init-set
            image: 'alpine:latest'
            command:
              - /mnt/scripts/run.sh
            resources: {}
            volumeMounts:
              - name: scripts-vol
                mountPath: /mnt/scripts
              - name: conf-vol
                mountPath: /mnt/data
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            imagePullPolicy: IfNotPresent
          - resources: {}
            terminationMessagePath: /dev/termination-log
            name: init-solr-data
            command:
              - /bin/sh
              - '-c'
            securityContext:
              privileged: true
              runAsUser: 0
              readOnlyRootFilesystem: false
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: solrdata
                mountPath: /store
              - name: scripts-vol
                mountPath: /mnt/scripts
              - name: conf-vol
                mountPath: /mnt/data
            terminationMessagePolicy: File
            image: busybox
            args:
              - >-
                mkdir -p /store/data;  mkdir -p /store/data ;  chmod 755  -R
                /store ; chown 8983:8983 -R  /store/
          - resources: {}
            terminationMessagePath: /dev/termination-log
            name: init-solr-xml
            command:
              - /bin/sh
              - '-c'
            securityContext:
              privileged: true
              runAsUser: 0
              readOnlyRootFilesystem: false
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: solrdata
                mountPath: /store
              - name: scripts-vol
                mountPath: /mnt/scripts
              - name: conf-vol
                mountPath: /mnt/data
            terminationMessagePolicy: File
            image: "solr:6"
            args:
              - >-
                cp /mnt/data/set.conf /store/data/solr.xml && cp
                /mnt/data/set.conf /opt/solr/server/solr/solr.xml
        serviceAccountName: meemoo-priv
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 10
        securityContext:
          runAsUser: 8983
        containers:
          - resources:
              limits:
                cpu: 600m
                memory: 1000Mi
              requests:
                cpu: 200m
                memory: 364Mi
            terminationMessagePath: /dev/termination-log
            name: solr-${ENV}
            command:
              - /bin/bash
              - '-c'
              - source /mnt/data/.solr.envs && solr-foreground
            env:
              - name: SOLR_HOME
                valueFrom:
                  configMapKeyRef:
                    name: solr-config-${ENV}
                    key: solrHome
              - name: ZK_HOST
                valueFrom:
                  configMapKeyRef:
                    name: solr-config-${ENV}
                    key: zkHost
              - name: SOLR_LOGS_DIR
                valueFrom:
                  configMapKeyRef:
                    name: solr-config-${ENV}
                    key: solrLogsDir
              - name: SOLR_HEAP
                value: 900M
            ports:
              - name: solr-port
                containerPort: 2080
                protocol: TCP
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: solrdata
                mountPath: /store
              - name: scripts-vol
                mountPath: /mnt/scripts
              - name: conf-vol
                mountPath: /mnt/data
            terminationMessagePolicy: File
            image: 'solr:6'
        serviceAccount: meemoo-priv
        volumes:
          - name: scripts-vol
            configMap:
              name: solr-config
              defaultMode: 365
          - name: conf-vol
            emptyDir: {}
          - name: solrdata
            persistentVolumeClaim:
              claimName: task-solr-pv-claim
        dnsPolicy: ClusterFirst
    volumeClaimTemplates:
      - kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: solrdata
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 20Gi
          volumeMode: Filesystem
        status:
          phase: Pending
    serviceName: solr-${ENV}
    podManagementPolicy: OrderedReady
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        partition: 0
    revisionHistoryLimit: 10


- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: solr-${ENV}-0
    labels:
      app: solr-${ENV}
      app.kubernetes.io/part-of: solr-6
  spec:
    ports:
    - name: http
      port: 2080
      protocol: TCP
      targetPort: 2080
    selector:
      app: solr-${ENV}
      statefulset.kubernetes.io/pod-name: solr-ss-${ENV}-0
    sessionAffinity: None
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: solr-${ENV}-1
  spec:
    ports:
    - name: http
      port: 2081
      protocol: TCP
      targetPort: 2081
    selector:
      app: solr-${ENV}
      statefulset.kubernetes.io/pod-name: solr-ss-${ENV}-1
    sessionAffinity: None
  status:
    loadBalancer: {}

- apiVersion: v1
  data:
    solrHome: /store/data
    solrHost: solr-${ENV}
    solrLogsDir: /store/logs
    zkHost: zookeeper-service-${ENV}:2181
  kind: ConfigMap
  metadata:
    annotations:
    labels:
      app: solr-${ENV}
      app.kubernetes.io/part-of: solr-6
    name: solr-config-${ENV}

- apiVersion: v1
  data:
    run.sh: "#!/bin/sh\nSET_INDEX=${HOSTNAME##*-}\necho \"Starting initializing for pod $SET_INDEX\"\nif [ \"$SET_INDEX\" = \"0\" ]; then\n  cp /mnt/scripts/set-0.conf /mnt/data/set.conf\n  echo \"export SOLR_PORT=2080\" > /mnt/data/.solr.envs\n  echo \"export SOLR_HOST=solr-${ENV}-0\" >> /mnt/data/.solr.envs\n  \nelif [ \"$SET_INDEX\" = \"1\" ]; then\n  cp /mnt/scripts/set-1.conf /mnt/data/set.conf\n  echo \"export SOLR_PORT=2081\" > /mnt/data/.solr.envs\n  echo \"export SOLR_HOST=solr-${ENV}-1\" >> /mnt/data/.solr.envs\n\nelse\n  echo \"Invalid statefulset index\"\n  exit 1\nfi\n"
    set-0.conf: |
      <solr>

        <solrcloud>
          <str name="host">${host:}</str>
          <int name="hostPort">2080</int>
          <str name="hostContext">${hostContext:solr}</str>
          <int name="zkClientTimeout">${zkClientTimeout:15000}</int>
          <bool name="genericCoreNodeNames">${genericCoreNodeNames:true}</bool>
        </solrcloud>

        <shardHandlerFactory name="shardHandlerFactory"
          class="HttpShardHandlerFactory">
          <int name="socketTimeout">${socketTimeout:0}</int>
          <int name="connTimeout">${connTimeout:0}</int>
        </shardHandlerFactory>

      </solr>
    set-1.conf: |
      <solr>

        <solrcloud>
          <str name="host">${host:}</str>
          <int name="hostPort">2081</int>
          <str name="hostContext">${hostContext:solr}</str>
          <int name="zkClientTimeout">${zkClientTimeout:15000}</int>
          <bool name="genericCoreNodeNames">${genericCoreNodeNames:true}</bool>
        </solrcloud>

        <shardHandlerFactory name="shardHandlerFactory"
          class="HttpShardHandlerFactory">
          <int name="socketTimeout">${socketTimeout:0}</int>
          <int name="connTimeout">${connTimeout:0}</int>
        </shardHandlerFactory>

      </solr>
  kind: ConfigMap
  metadata:   
    labels:
      app: solr-${ENV}
      app.kubernetes.io/part-of: solr-6
    name: solr-config

- apiVersion: v1
  data:
    zooDataDir: /store/data
    zooDataLogDir: /store/datalog
    zooLogDir: /store/logs
    zooMyId: "1"
    zooPort: "2181"
  kind: ConfigMap
  metadata:
    labels:
      app: solr-${ENV}
    name: zookeeper-config-${ENV}
    namespace: catalogi
- kind: StatefulSet
  apiVersion: apps/v1
  metadata:
    annotations:
    
    name: zookeeper-ss-${ENV}
    labels:
      app: solr-${ENV}
      app.kubernetes.io/part-of: solr-6
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: zookeeper-app-${ENV}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: zookeeper-app-${ENV}
      spec:
        volumes:
          - name: volzookeeper-${ENV}
            persistentVolumeClaim:
              claimName: task-zookeeper-pv-claim
        initContainers:
          - name: init-zookeeper-data
            image: busybox
            command:
              - sh
              - '-c'
              - 'mkdir -p /store/data && chown 1000:1000 /store/data'
            resources: {}
            volumeMounts:
              - name: volzookeeper-${ENV}
                mountPath: /store
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            imagePullPolicy: IfNotPresent
          - name: init-zookeeper-logs
            image: busybox
            command:
              - sh
              - '-c'
              - 'mkdir -p /store/logs && chown 1000:1000 /store/logs'
            resources: {}
            volumeMounts:
              - name: volzookeeper-${ENV}
                mountPath: /store
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            imagePullPolicy: IfNotPresent
          - name: init-zookeeper-datalog
            image: busybox
            command:
              - sh
              - '-c'
              - 'mkdir -p /store/datalog && chown 1000:1000 /store/datalog'
            resources: {}
            volumeMounts:
              - name: volzookeeper-${ENV}
                mountPath: /store
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            imagePullPolicy: IfNotPresent
        containers:
          - resources: {}
            terminationMessagePath: /dev/termination-log
            name: zookeeper-${ENV}
            env:
              - name: ZOO_MY_ID
                valueFrom:
                  configMapKeyRef:
                    name: zookeeper-config-${ENV}
                    key: zooMyId
              - name: ZOO_LOG_DIR
                valueFrom:
                  configMapKeyRef:
                    name: zookeeper-config-${ENV}
                    key: zooLogDir
              - name: ZOO_DATA_DIR
                valueFrom:
                  configMapKeyRef:
                    name: zookeeper-config-${ENV}
                    key: zooDataDir
              - name: ZOO_DATA_LOG_DIR
                valueFrom:
                  configMapKeyRef:
                    name: zookeeper-config-${ENV}
                    key: zooDataLogDir
              - name: ZOO_PORT
                valueFrom:
                  configMapKeyRef:
                    name: zookeeper-config-${ENV}
                    key: zooPort
            ports:
              - name: zookeeper-port
                containerPort: 2181
                protocol: TCP
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: volzookeeper-${ENV}
                mountPath: /store
            terminationMessagePolicy: File
            image: >-
              image-registry.openshift-image-registry.svc:5000/catalogi/zookeeper:latest
        restartPolicy: Always
        terminationGracePeriodSeconds: 10
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
    volumeClaimTemplates:
      - kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: volzookeeper-${ENV}
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          volumeMode: Filesystem
        status:
          phase: Pending
    serviceName: zookeeper-service-${ENV}
    podManagementPolicy: OrderedReady
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        partition: 0
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: solr-${ENV}
    name: zookeeper-service-${ENV}
    namespace: catalogi
  spec:
    ports:
    - port: 2181
      protocol: TCP
      targetPort: 2181
    selector:
      app: zookeeper-app-${ENV}
    sessionAffinity: None
    type: ClusterIP
parameters:
- name: ENV
  value: int
- name: SOLR_VERSION_MAJ
  value: "6"
- name: disksize
  value: 20Gi
